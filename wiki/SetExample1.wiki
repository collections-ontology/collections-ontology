#summary Example: Set of CO contributors

*Set example #1*
== Modeling the Contributors of CO ==

Simplest representation of the set:

{{{
# Snippet 1

@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix co:  	 <http://purl.org/co/>.
@prefix foaf:  	 <http://xmlns.com/foaf/0.1/>.

<http://purl.org/co/example/1/set/1>
 	a co:Set;
 	co:element <http://www.hcklab.org/foaf.rdf#me> ;
 	co:element :a1 ;
 	co:element :a2 .
 		
<http://www.hcklab.org/foaf.rdf#me> 
    a foaf:Person ;
    foaf:firstName "Paolo" ;
    foaf:lastName "Ciccarese" .
    
:a1
    a foaf:Person ;
    foaf:firstName "Marco" ;
    foaf:lastName "Ocana" .
    
:a2
    a foaf:Person ;
    foaf:firstName "Silvio" ;
    foaf:lastName "Peroni" .
}}}

=== Adding provenance and labels ===
It is possible to add labels and provenance data using the desired vocabulary. For example, the following file has been created manually by one of the contributors of the CO ontology.

{{{
# Snippet 2

@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix co:  	 <http://purl.org/co/>.
@prefix foaf:  	 <http://xmlns.com/foaf/0.1/>.

<http://purl.org/co/example/1/set/1>
 	a co:Set;
 	rdfs:label "Collections Ontology Contributors" ;
        dct:created "2011-03-25" ;
 	dct:creator <http://www.hcklab.org/foaf.rdf#me> ;
 	co:element <http://www.hcklab.org/foaf.rdf#me> ;
 	co:element :a1 ;
 	co:element :a2 .
 		
<http://www.hcklab.org/foaf.rdf#me> 
    a foaf:Person ;
    rdfs:label "Paolo Ciccarese" ;
    foaf:firstName "Paolo" ;
    foaf:lastName "Ciccarese" .
    
:a1
    a foaf:Person ;
    rdfs:label "Marco Ocana" ;
    foaf:firstName "Marco" ;
    foaf:lastName "Ocana" .
    
:a2
    a foaf:Person ;
    rdfs:label "Silvio Peroni" ;
    foaf:firstName "Silvio" ;
    foaf:lastName "Peroni" .
}}}

=== How would this integrate, for example, with FOAF? ===
If you are a FOAF user, you might want to define the contributors to Collections Ontology as a FOAF (Friend Of A Friend) _Group_. Without Collections Ontology:

{{{
# Snippet 3

@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix dc:      <http://purl.org/dc/elements/1.1/#>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix pav:     <http://purl.org/pav/>.
@prefix foaf:  	 <http://xmlns.com/foaf/0.1/>.

<http://purl.org/co/example/1/set/1>
 	rdfs:label "Collections Ontology Contributors" ;
 	dct:creator <http://www.hcklab.org/foaf.rdf#me> ;
 	dct:created "2011-03-25" ;
        # foaf
        a foaf:Group ;
 	foaf:member <http://www.hcklab.org/foaf.rdf#me> ;
 	foaf:member :a1 ;
 	foaf:member :a2 ;
 		
<http://www.hcklab.org/foaf.rdf#me> 
    a foaf:Person ;
    rdfs:label "Paolo Ciccarese" ;
    foaf:firstName "Paolo" ;
    foaf:lastName "Ciccarese" .
    
:a1
    a foaf:Person ;
    rdfs:label "Marco Ocana" ;
    foaf:firstName "Marco" ;
    foaf:lastName "Ocana" .
    
:a2
    a foaf:Person ;
    rdfs:label "Silvio Peroni" ;
    foaf:firstName "Silvio" ;
    foaf:lastName "Peroni" .
}}}

====Collections Ontology Approach #1: redundant statements====
The above example could be enough if your application is reacting to FOAF. However, if you want to introduce a level of abstraction and write code against Collections ontology structures one solution would be to express, at the same time, FOAF and Collections Ontology.

{{{
# Snippet 4

@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix dc:      <http://purl.org/dc/elements/1.1/#>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix pav:     <http://purl.org/pav/>.
@prefix co:  	 <http://purl.org/co/>.
@prefix foaf:  	 <http://xmlns.com/foaf/0.1/>.

<http://purl.org/co/example/1/set/1>
 	rdfs:label "Collections Ontology Contributors" ;
 	dct:creator <http://www.hcklab.org/foaf.rdf#me> ;
 	dct:created "2011-03-25" ;
        # foaf
        a foaf:Group ;
 	foaf:member <http://www.hcklab.org/foaf.rdf#me> ;
 	foaf:member :a1 ;
 	foaf:member :a2 ;
 	# Collections Ontology 
 	a co:Set ;
 	co:element <http://www.hcklab.org/foaf.rdf#me> ;
 	co:element :a1 ;
 	co:element :a2 .
 		
<http://www.hcklab.org/foaf.rdf#me> 
    a foaf:Person ;
    rdfs:label "Paolo Ciccarese" ;
    foaf:firstName "Paolo" ;
    foaf:lastName "Ciccarese" .
    
:a1
    a foaf:Person ;
    rdfs:label "Marco Ocana" ;
    foaf:firstName "Marco" ;
    foaf:lastName "Ocana" .
    
:a2
    a foaf:Person ;
    rdfs:label "Silvio Peroni" ;
    foaf:firstName "Silvio" ;
    foaf:lastName "Peroni" .
}}}

====Collections Ontology Approach #2: leveraging inference====
An alternative to this approach, that works with some little inference, consists in providing some mapping between FOAF and CO.
{{{
# Snippet 5

    foaf:Group a co:Set.
    foaf:member rdfs:subPropertyOf co:element.
    foaf:member owl:inverseOf foafx:memberOf.
}}}

Given the above assertions, I can manage to treat the _foaf:Group_ as a _co:Set_ without altering the original code nor introducing redundancies. 